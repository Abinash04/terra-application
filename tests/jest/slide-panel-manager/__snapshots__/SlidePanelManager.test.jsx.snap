// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ApplicationModalManager should disclose content in Modal 1`] = `
<SlidePanelManager
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  navigationPromptResolutionOptions={
    Object {
      "acceptButtonText": "Test Accept Text",
      "content": <div>
        Test Content
      </div>,
      "endMessage": "Test End Message",
      "rejectButtonText": "Test Reject Text",
      "startMessage": "Test Start Message",
      "title": "Test Title",
    }
  }
  panelBehavior="overlay"
>
  <SlidePanelManager
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    panelBehavior="overlay"
    withDisclosureContainer={[Function]}
  >
    <withDisclosureManager(DisclosureManager)
      render={[Function]}
      supportedDisclosureTypes={
        Array [
          "panel",
        ]
      }
      withDisclosureContainer={[Function]}
    >
      <DisclosureManager
        render={[Function]}
        supportedDisclosureTypes={
          Array [
            "panel",
          ]
        }
        withDisclosureContainer={[Function]}
      >
        <SlidePanel
          fill={true}
          intl={
            Object {
              "defaultFormats": Object {},
              "defaultLocale": "en",
              "formatDate": [Function],
              "formatHTMLMessage": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatPlural": [Function],
              "formatRelative": [Function],
              "formatTime": [Function],
              "formats": Object {},
              "formatters": Object {
                "getDateTimeFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralFormat": [Function],
                "getRelativeFormat": [Function],
              },
              "locale": "en",
              "messages": null,
              "now": [Function],
              "onError": [Function],
              "textComponent": "span",
              "timeZone": null,
            }
          }
          isOpen={true}
          mainContent={
            <Context.Provider
              value={
                DisclosureManagerDelegateInstance {
                  "disclose": [Function],
                }
              }
            >
              <withDisclosureManager(Component)
                id="child-with-disclosure"
              />
            </Context.Provider>
          }
          panelBehavior="overlay"
          panelContent={
            <ContentContainer
              fill={true}
              header={<React.Fragment />}
            >
              <SlideGroup
                isAnimated={true}
                items={
                  Array [
                    <Context.Provider
                      value={
                        Object {
                          "register": [Function],
                        }
                      }
                    >
                      <Context.Provider
                        value={
                          DisclosureManagerDelegateInstance {
                            "closeDisclosure": [Function],
                            "disclose": [Function],
                            "dismiss": [Function],
                            "maximize": [Function],
                            "registerDismissCheck": [Function],
                            "requestFocus": [Function],
                          }
                        }
                      >
                        <DisclosureContainer
                          navigationPromptResolutionOptions={
                            Object {
                              "acceptButtonText": "Test Accept Text",
                              "content": <div>
                                Test Content
                              </div>,
                              "endMessage": "Test End Message",
                              "rejectButtonText": "Test Reject Text",
                              "startMessage": "Test Start Message",
                              "title": "Test Title",
                            }
                          }
                        >
                          <withDisclosureManager(Component)
                            id="test-panel"
                          />
                        </DisclosureContainer>
                      </Context.Provider>
                    </Context.Provider>,
                  ]
                }
              />
            </ContentContainer>
          }
          panelPosition="end"
          panelSize="large"
        >
          <div
            className="slide-panel is-open fill"
            data-slide-panel-panel-behavior="overlay"
            data-slide-panel-panel-position="end"
            data-slide-panel-panel-size="large"
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
          >
            <div
              className="main"
              tabIndex="-1"
            >
              <withDisclosureManager(Component)
                id="child-with-disclosure"
              >
                <Component
                  disclosureManager={
                    DisclosureManagerDelegateInstance {
                      "disclose": [Function],
                    }
                  }
                  id="child-with-disclosure"
                >
                  <button
                    id="child-with-disclosure"
                    type="button"
                  >
                    Hello World
                  </button>
                </Component>
              </withDisclosureManager(Component)>
            </div>
            <div
              aria-hidden="false"
              className="panel"
              tabIndex="-1"
            >
              <ContentContainer
                fill={true}
                header={<React.Fragment />}
              >
                <div
                  className="content-container-fill"
                >
                  <div
                    className="header"
                  />
                  <div
                    className="main"
                  >
                    <Scroll
                      className="normalizer"
                    >
                      <div
                        className="scroll normalizer"
                      >
                        <SlideGroup
                          isAnimated={true}
                          items={
                            Array [
                              <Context.Provider
                                value={
                                  Object {
                                    "register": [Function],
                                  }
                                }
                              >
                                <Context.Provider
                                  value={
                                    DisclosureManagerDelegateInstance {
                                      "closeDisclosure": [Function],
                                      "disclose": [Function],
                                      "dismiss": [Function],
                                      "maximize": [Function],
                                      "registerDismissCheck": [Function],
                                      "requestFocus": [Function],
                                    }
                                  }
                                >
                                  <DisclosureContainer
                                    navigationPromptResolutionOptions={
                                      Object {
                                        "acceptButtonText": "Test Accept Text",
                                        "content": <div>
                                          Test Content
                                        </div>,
                                        "endMessage": "Test End Message",
                                        "rejectButtonText": "Test Reject Text",
                                        "startMessage": "Test Start Message",
                                        "title": "Test Title",
                                      }
                                    }
                                  >
                                    <withDisclosureManager(Component)
                                      id="test-panel"
                                    />
                                  </DisclosureContainer>
                                </Context.Provider>
                              </Context.Provider>,
                            ]
                          }
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            className="slide-group"
                            component="div"
                            key="DISCLOSE_KEY"
                          >
                            <div
                              className="slide-group"
                            >
                              <CSSTransition
                                classNames={
                                  Object {
                                    "enter": "enter",
                                    "enterActive": "enter-active",
                                    "exit": "exit",
                                    "exitActive": "exit-active",
                                  }
                                }
                                enter={true}
                                exit={true}
                                id="shmmoop"
                                in={true}
                                key=".$DISCLOSE_KEY"
                                onEntered={[Function]}
                                onExit={[Function]}
                                onExited={[Function]}
                                timeout={300}
                              >
                                <Transition
                                  appear={false}
                                  enter={true}
                                  exit={true}
                                  id="shmmoop"
                                  in={true}
                                  mountOnEnter={false}
                                  onEnter={[Function]}
                                  onEntered={[Function]}
                                  onEntering={[Function]}
                                  onExit={[Function]}
                                  onExited={[Function]}
                                  onExiting={[Function]}
                                  timeout={300}
                                  unmountOnExit={false}
                                >
                                  <Slide
                                    id="shmmoop"
                                    isHidden={false}
                                  >
                                    <div
                                      aria-hidden={null}
                                      className="slide"
                                    >
                                      <div
                                        className="slide-shadow"
                                      />
                                      <DisclosureContainer
                                        navigationPromptResolutionOptions={
                                          Object {
                                            "acceptButtonText": "Test Accept Text",
                                            "content": <div>
                                              Test Content
                                            </div>,
                                            "endMessage": "Test End Message",
                                            "rejectButtonText": "Test Reject Text",
                                            "startMessage": "Test Start Message",
                                            "title": "Test Title",
                                          }
                                        }
                                      >
                                        <ApplicationErrorBoundary>
                                          <ApplicationLoadingOverlayProvider>
                                            <OverlayContainer
                                              className="container"
                                              overlay={
                                                <LoadingOverlay
                                                  backgroundStyle="clear"
                                                  isAnimated={true}
                                                  isOpen={false}
                                                  isRelativeToContainer={true}
                                                  rootSelector="#root"
                                                />
                                              }
                                            >
                                              <div
                                                className="overlay-container container"
                                              >
                                                <LoadingOverlay
                                                  backgroundStyle="clear"
                                                  isAnimated={true}
                                                  isOpen={false}
                                                  isRelativeToContainer={true}
                                                  rootSelector="#root"
                                                >
                                                  <Overlay
                                                    aria-live="polite"
                                                    backgroundStyle="clear"
                                                    className="loading-overlay"
                                                    isOpen={false}
                                                    isRelativeToContainer={true}
                                                    isScrollable={false}
                                                    rootSelector="#root"
                                                    zIndex="100"
                                                  />
                                                </LoadingOverlay>
                                                <div
                                                  className="container-content"
                                                  data-terra-overlay-container-content={true}
                                                >
                                                  <Scroll>
                                                    <div
                                                      className="scroll"
                                                    >
                                                      <withPromptRegistration(NavigationPromptCheckpoint)>
                                                        <NavigationPromptCheckpoint
                                                          promptRegistration={
                                                            Object {
                                                              "isDefaultContextValue": true,
                                                              "registerPrompt": [Function],
                                                              "unregisterPrompt": [Function],
                                                            }
                                                          }
                                                        >
                                                          <withDisclosureManager(Component)
                                                            id="test-panel"
                                                          >
                                                            <Component
                                                              disclosureManager={
                                                                DisclosureManagerDelegateInstance {
                                                                  "closeDisclosure": [Function],
                                                                  "disclose": [Function],
                                                                  "dismiss": [Function],
                                                                  "maximize": [Function],
                                                                  "registerDismissCheck": [Function],
                                                                  "requestFocus": [Function],
                                                                }
                                                              }
                                                              id="test-panel"
                                                            >
                                                              <button
                                                                id="test-panel"
                                                                type="button"
                                                              >
                                                                Hello World
                                                              </button>
                                                            </Component>
                                                          </withDisclosureManager(Component)>
                                                        </NavigationPromptCheckpoint>
                                                      </withPromptRegistration(NavigationPromptCheckpoint)>
                                                    </div>
                                                  </Scroll>
                                                </div>
                                              </div>
                                            </OverlayContainer>
                                          </ApplicationLoadingOverlayProvider>
                                        </ApplicationErrorBoundary>
                                      </DisclosureContainer>
                                    </div>
                                  </Slide>
                                </Transition>
                              </CSSTransition>
                            </div>
                          </TransitionGroup>
                        </SlideGroup>
                      </div>
                    </Scroll>
                  </div>
                </div>
              </ContentContainer>
            </div>
          </div>
        </SlidePanel>
      </DisclosureManager>
    </withDisclosureManager(DisclosureManager)>
  </SlidePanelManager>
</SlidePanelManager>
`;

exports[`ApplicationModalManager should render the ApplicationModalManager 1`] = `
<SlidePanelManager
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  navigationPromptResolutionOptions={
    Object {
      "acceptButtonText": "Test Accept Text",
      "content": <div>
        Test Content
      </div>,
      "endMessage": "Test End Message",
      "rejectButtonText": "Test Reject Text",
      "startMessage": "Test Start Message",
      "title": "Test Title",
    }
  }
  panelBehavior="overlay"
>
  <SlidePanelManager
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    panelBehavior="overlay"
    withDisclosureContainer={[Function]}
  >
    <withDisclosureManager(DisclosureManager)
      render={[Function]}
      supportedDisclosureTypes={
        Array [
          "panel",
        ]
      }
      withDisclosureContainer={[Function]}
    >
      <DisclosureManager
        render={[Function]}
        supportedDisclosureTypes={
          Array [
            "panel",
          ]
        }
        withDisclosureContainer={[Function]}
      >
        <SlidePanel
          fill={true}
          intl={
            Object {
              "defaultFormats": Object {},
              "defaultLocale": "en",
              "formatDate": [Function],
              "formatHTMLMessage": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatPlural": [Function],
              "formatRelative": [Function],
              "formatTime": [Function],
              "formats": Object {},
              "formatters": Object {
                "getDateTimeFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralFormat": [Function],
                "getRelativeFormat": [Function],
              },
              "locale": "en",
              "messages": null,
              "now": [Function],
              "onError": [Function],
              "textComponent": "span",
              "timeZone": null,
            }
          }
          isOpen={false}
          mainContent={
            <Context.Provider
              value={
                DisclosureManagerDelegateInstance {
                  "disclose": [Function],
                }
              }
            >
              <withDisclosureManager(Component)
                id="child-with-disclosure"
              />
            </Context.Provider>
          }
          panelBehavior="overlay"
          panelContent={
            <ContentContainer
              fill={true}
              header={<React.Fragment />}
            >
              <SlideGroup
                isAnimated={true}
                items={Array []}
              />
            </ContentContainer>
          }
          panelPosition="end"
          panelSize="small"
        >
          <div
            className="slide-panel fill"
            data-slide-panel-panel-behavior="overlay"
            data-slide-panel-panel-position="end"
            data-slide-panel-panel-size="small"
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
          >
            <div
              className="main"
              tabIndex="-1"
            >
              <withDisclosureManager(Component)
                id="child-with-disclosure"
              >
                <Component
                  disclosureManager={
                    DisclosureManagerDelegateInstance {
                      "disclose": [Function],
                    }
                  }
                  id="child-with-disclosure"
                >
                  <button
                    id="child-with-disclosure"
                    type="button"
                  >
                    Hello World
                  </button>
                </Component>
              </withDisclosureManager(Component)>
            </div>
            <div
              aria-hidden="true"
              className="panel"
              tabIndex="-1"
            >
              <ContentContainer
                fill={true}
                header={<React.Fragment />}
              >
                <div
                  className="content-container-fill"
                >
                  <div
                    className="header"
                  />
                  <div
                    className="main"
                  >
                    <Scroll
                      className="normalizer"
                    >
                      <div
                        className="scroll normalizer"
                      >
                        <SlideGroup
                          isAnimated={true}
                          items={Array []}
                        />
                      </div>
                    </Scroll>
                  </div>
                </div>
              </ContentContainer>
            </div>
          </div>
        </SlidePanel>
      </DisclosureManager>
    </withDisclosureManager(DisclosureManager)>
  </SlidePanelManager>
</SlidePanelManager>
`;
